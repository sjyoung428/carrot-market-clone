// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id              Int         @id @default(autoincrement())
  phone           String?     @unique
  name            String
  email           String?     @unique
  avatar          String?
  createAt        DateTime    @default(now())
  updateAt        DateTime    @updatedAt
  tokens          Token[]
  Product         Product[]
  Favorite        Favorite[]
  Post            Post[]
  Answer          Answer[]
  Wondering       Wondering[]
  writtenReviews  Review[]    @relation(name: "writtenReviews")
  recievedReviews Review[]    @relation(name: "recievedReviews")
  sales           Sale[]
  purchases       Purchase[]
  streams         Stream[]
  messages        Message[]
}

model Token {
  id       Int      @id @default(autoincrement())
  payload  String   @unique
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Product {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  name        String
  price       Int
  image       String
  description String     @db.MediumText
  createAt    DateTime   @default(now())
  updateAt    DateTime   @updatedAt
  Favorite    Favorite[]
  sales       Sale[]
  purchases   Purchase[]
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    Int
  productId Int
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Post {
  id        Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  latitude  Float?
  longitude Float?
  question  String      @db.MediumText
  createAt  DateTime    @default(now())
  updateAt  DateTime    @updatedAt
  answer    Answer[]
  Wondering Wondering[]
}

model Answer {
  id       Int      @id @default(autoincrement())
  answer   String   @db.MediumText
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  userId   Int
  postId   Int
}

model Wondering {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId   Int
  postId   Int
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

}

model Review {
  id           Int      @id @default(autoincrement())
  review       String   @db.MediumText
  createdBy    User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdFor   User     @relation(name: "recievedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createAt     DateTime @default(now())
  updateAt     DateTime @updatedAt
  score        Int
  createdById  Int
  createdForId Int
}

model Sale {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    Int
  productId Int
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    Int
  productId Int
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Stream {
  id          Int       @id @default(autoincrement())
  name        String
  description String    @db.MediumText
  price       Int
  createAt    DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  messages    Message[]
}

model Message {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  userId   Int
  message  String   @db.MediumText
  stream   Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId Int
}
